{"version":3,"sources":["Router.js"],"names":["define","langx","routers","Route","_curCtx","_prevCtx","_baseUrl","_homePath","_routes","_cache","_hub","Evented","createEvent","type","props","e","CustomEvent","safeMixin","dispatch","ctx","route","exit","path","params","m","map","r","enter","force","Deferred","when","then","trigger","current","previous","go","router","useHistoryApi","state","window","history","pushState","document","title","replace","dispatchEvent","useHashbang","newHash","location","hash","noCache","finded","each","name","ret","match","routes","settings","isDefined","mixin","hub","off","apply","arguments","on","one","routeName","baseUrl","this","homePath","setting","start","host","initPath","pathname","undefined","startsWith","addEventListener","preventDefault","skylark"],"mappings":"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","file":"../Router.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./routers\",\r\n    \"./Route\"\r\n],function(langx,routers,Route){\r\n    var _curCtx,\r\n        _prevCtx,\r\n        _baseUrl,\r\n        _homePath,\r\n        _routes = {},\r\n        _cache = {},\r\n        _hub = new langx.Evented();\r\n\r\n    function createEvent(type,props) {\r\n        var e = new CustomEvent(type,props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n\r\n    function current() {\r\n        return _curCtx;\r\n    }\r\n\r\n    // refresh the current route\r\n    function dispatch(ctx) {\r\n\r\n        if (_curCtx) {\r\n            var ret = _curCtx.route.exit({\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            }, true);\r\n            if (!ret) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        _prevCtx = _curCtx;\r\n        _curCtx = ctx;\r\n        if (!_curCtx.route) {\r\n            var m = map(_curCtx.path);\r\n            _curCtx.route = m.route;\r\n            _curCtx.params = m.params;\r\n        }\r\n\r\n        var r = _curCtx.route.enter({\r\n            force: _curCtx.force,\r\n            path: _curCtx.path,\r\n            params: _curCtx.params\r\n        },true);\r\n\r\n        langx.Deferred.when(r).then(function() {\r\n            _hub.trigger(createEvent(\"routing\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            }));\r\n\r\n            _curCtx.route.enter({\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            },false);\r\n\r\n            if (_prevCtx) {\r\n                _prevCtx.route.exit({\r\n                    path: _prevCtx.path,\r\n                    params: _prevCtx.params\r\n                }, false);\r\n            }\r\n\r\n            _hub.trigger(createEvent(\"routed\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            }));\r\n        });\r\n    }\r\n\r\n    function go(path, force) {\r\n        if (!force && _curCtx && _curCtx.path == path) {\r\n            return false;\r\n        }\r\n        var ctx = map(path);\r\n        if (ctx) {\r\n            ctx.path = path;\r\n\r\n            if (router.useHistoryApi) {\r\n                var state = {\r\n                    force: force,\r\n                    path: path\r\n                }\r\n\r\n                window.history.pushState(state, document.title, (_baseUrl + path).replace(\"//\", \"/\"));\r\n                window.dispatchEvent(createEvent(\"popstate\", {\r\n                    state: state\r\n                }));\r\n            } else if (router.useHashbang) {\r\n                var newHash = \"#!\" + path;\r\n                if (window.location.hash !== newHash) {\r\n                    window.location.hash = newHash;\r\n                } else {\r\n                    dispatch(ctx);\r\n                };\r\n            } else {\r\n                dispatch(ctx);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function map(path, noCache) {\r\n        var finded = false;\r\n        if (!noCache) {\r\n            finded = _cache[path];\r\n            if (finded) {\r\n                return finded;\r\n            }\r\n        }\r\n        langx.each(_routes, function(name, route) {\r\n            var ret = route.match(path);\r\n            if (ret) {\r\n                finded = {\r\n                    route: route,\r\n                    params: ret\r\n                }\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        if (finded && !noCache) {\r\n            _cache[path] = finded;\r\n        }\r\n        return finded;\r\n    }\r\n\r\n    function path(routeName, params) {\r\n        var route = _routes[routeName],\r\n            path;\r\n        if (route) {\r\n            path = route.path(params);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function previous() {\r\n        return _prevCtx;\r\n    }\r\n\r\n    function baseUrl(path) {\r\n        if (langx.isDefined(path)) {\r\n            _baseUrl = path;\r\n            return this;\r\n        } else {\r\n            return _baseUrl;\r\n        }\r\n    }\r\n\r\n    function hub(){\r\n        return _hub;\r\n    }\r\n\r\n    function homePath(path) {\r\n        if (langx.isDefined(path)) {\r\n            _homePath = path;\r\n            return this;\r\n        } else {\r\n            return _homePath;\r\n        }\r\n    }\r\n\r\n    function route(name, setting) {\r\n        if (langx.isDefined(setting)) {\r\n            var settings = {};\r\n            settings[name] = setting;\r\n            routes(settings);\r\n            return this;\r\n        } else {\r\n            return _routes[name];\r\n        }\r\n    }\r\n\r\n    function routes(settings) {\r\n        if (!langx.isDefined(settings)) {\r\n            return langx.mixin({}, _routes);\r\n        } else {\r\n            for (var name in settings) {\r\n                _routes[name] = new router.Route(name, settings[name]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //starts routing urls\r\n    function start() {\r\n        if (router.useHashbang == null && router.useHistoryApi == null) {\r\n            if (window.location.host  && window.history.pushState) {\r\n                //web access\r\n                router.useHistoryApi = true;\r\n            } else {\r\n                // local access\r\n                router.useHashbang = true;\r\n            }\r\n        }\r\n\r\n        var initPath = \"\";\r\n\r\n        if (router.useHistoryApi) {\r\n            initPath = window.location.pathname;\r\n            if (_baseUrl === undefined) {\r\n                _baseUrl = initPath.replace(/\\/$/, \"\");\r\n            }\r\n            initPath = initPath.replace(_baseUrl, \"\") || _homePath || \"/\";\r\n        } else if (router.useHashbang) {\r\n            initPath = window.location.hash.replace(\"#!\", \"\") || _homePath || \"/\";\r\n        } else {\r\n            initPath = \"/\";\r\n        }\r\n\r\n        if (!initPath.startsWith(\"/\")) {\r\n            initPath = \"/\" + initPath;\r\n        }\r\n        /*\r\n        eventer.on(document.body, \"click\", \"a[href]\", function(e) {\r\n            var elm = e.currentTarget,\r\n                url = elm.getAttribute(\"href\");\r\n\r\n            if (url == \"#\") {\r\n                return;\r\n            }\r\n            if (url && langx.isSameOrigin(elm.href)) {\r\n                if (url.indexOf(_baseUrl) === 0) {\r\n                    url = url.substr(_baseUrl.length);\r\n                    eventer.stop(e);\r\n                    url = url.replace('#!', '');\r\n                    go(url);\r\n                }\r\n            }\r\n        });\r\n        */\r\n        if (router.useHistoryApi) {\r\n            window.addEventListener(\"popstate\", function(e) {\r\n                if(e.state) dispatch(e.state);\r\n                e.preventDefault();\r\n            });\r\n        } else if (router.useHashbang) {\r\n            window.addEventListener(\"hashchange\", function(e) {\r\n                dispatch({\r\n                    path: window.location.hash.replace(/^#!/, \"\")\r\n                });\r\n                e.preventDefault();\r\n            });\r\n        }\r\n\r\n        go(initPath);\r\n    }\r\n\r\n    var router = function() {\r\n        return router;\r\n    };\r\n\r\n    langx.mixin(router, {\r\n        \"Route\": Route,\r\n\r\n        // Current path being processed\r\n        \"current\": current,\r\n\r\n        // Changes the current path\r\n        \"go\": go,\r\n\r\n        \"map\": map,\r\n\r\n        \"hub\": hub,\r\n\r\n        \"off\": function() {\r\n            _hub.off.apply(_hub, arguments);\r\n        },\r\n\r\n        \"on\": function() {\r\n            _hub.on.apply(_hub, arguments);\r\n        },\r\n\r\n        \"one\": function() {\r\n            _hub.one.apply(_hub, arguments);\r\n        },\r\n\r\n        // Returns the path of the named route\r\n        \"path\": path,\r\n\r\n        \"previous\": previous,\r\n\r\n        \"baseUrl\": baseUrl,\r\n\r\n        \"homePath\": homePath,\r\n\r\n        \"route\": route,\r\n\r\n        \"routes\": routes,\r\n\r\n        //starts routing urls\r\n        \"start\": start,\r\n\r\n        \"trigger\": function(e) {\r\n            _hub.trigger(e);\r\n            return this;\r\n        },\r\n\r\n        \"useHistoryApi\": null,\r\n        \"useHashbang\": null\r\n    });\r\n\r\n    return skylark.router = router;\r\n});\r\n"]}