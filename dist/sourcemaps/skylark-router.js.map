{"version":3,"sources":["skylark-router.js"],"names":["factory","globals","define","require","isAmd","amd","isCmd","exports","Error","router","skylarkjs","skylark","langx","browser","datax","eventer","async","current","_curCtx","dispatch","ctx","_prevCtx","ret","route","exit","path","params","m","map","r","enter","Deferred","when","then","trigger","_hub","previous","go","force","useHistoryApi","state","window","history","pushState","document","title","_baseUrl","replace","create","useHashbang","newHash","location","hash","noCache","finded","_cache","each","_routes","name","match","routeName","baseUrl","isDefined","this","hub","homePath","_homePath","setting","settings","routes","mixin","Route","start","host","initPath","pathname","undefined","on","body","e","elm","currentTarget","url","attr","isSameOrigin","href","indexOf","substr","length","stop","Evented","inherit","klassName","init","pathto","pattern","paramNames","paramName","substring","_setting","regex","RegExp","self","forEach","eventName","isFunction","query","_entering","result","_entered","safeMixin","ok","_exiting","_exited","names","x","slice","decodeURIComponent","exec","i","len","val","off","apply","arguments","one","type","props","main"],"mappings":"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","file":"../skylark-router.js","sourcesContent":["define('skylark-router/router',[\r\n    \"skylark-utils/skylark\",\r\n    \"skylark-utils/langx\",\r\n    \"skylark-utils/browser\",\r\n    \"skylark-utils/datax\",\r\n    \"skylark-utils/eventer\",\r\n    \"skylark-utils/async\"\r\n], function(skylark, langx, browser, datax, eventer,async) {\r\n\r\n    var _curCtx,\r\n        _prevCtx,\r\n        _baseUrl,\r\n        _homePath,\r\n        _routes = {},\r\n        _cache = {},\r\n        _hub = new langx.Evented();\r\n\r\n    var Route = langx.Evented.inherit({\r\n        klassName: \"Route\",\r\n        init: function(name, setting) {\r\n            setting = langx.mixin({}, setting);\r\n            var pathto = setting.pathto || \"\",\r\n                pattern = pathto,\r\n                paramNames = pattern.match(/\\:([a-zA-Z0-9_]+)/g);\r\n            if (paramNames !== null) {\r\n                paramNames = paramNames.map(function(paramName) {\r\n                    return paramName.substring(1);\r\n                });\r\n                pattern = pattern.replace(/\\:([a-zA-Z0-9_]+)/g, '(.*?)');\r\n            } else {\r\n                paramNames = [];\r\n            }\r\n            if (pattern === \"*\") {\r\n                pattern = \"(.*)\";\r\n            } else {\r\n                pattern = pattern.replace(\"/\", \"\\\\/\");\r\n            }\r\n\r\n            this._setting = setting;\r\n            this.name = name;\r\n            this.pathto = pathto;\r\n            this.paramNames = paramNames;\r\n            this.params = pattern;\r\n            this.regex = new RegExp(\"^\" + pattern + \"$\", \"\");\r\n\r\n            var self = this;\r\n            [\"entering\", \"entered\", \"exiting\", \"exited\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        enter: function(ctx,query) {\r\n            if (query) {\r\n                var r = this._entering(ctx);\r\n\r\n                return async.Deferred.when(r).then(function(){\r\n                    var e = eventer.create(\"entering\", {\r\n                        route: this,\r\n                        result: true\r\n                    });\r\n\r\n                    eventer.trigger(this, e);\r\n\r\n                    return e.result;\r\n                });\r\n            } else {\r\n                this._entered(ctx);\r\n\r\n                eventer.trigger(this, \"entered\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx));\r\n                return this;\r\n            }\r\n        },\r\n\r\n        exit: function(ctx, query) {\r\n            if (query) {\r\n                var ok = this._exiting(ctx);\r\n                if (!ok) {\r\n                    return false;\r\n                }\r\n\r\n                var e = eventer.create(\"exiting\", {\r\n                    route: this,\r\n                    result: true\r\n                });\r\n\r\n                eventer.trigger(this, e);\r\n\r\n                return e.result;\r\n            } else {\r\n                this._exited(ctx);\r\n                eventer.trigger(this, \"exited\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx));\r\n\r\n                return this;\r\n            }\r\n        },\r\n\r\n        match: function(path) {\r\n            var names = this.paramNames,\r\n                x = path.indexOf('?'),\r\n                path = ~x ? path.slice(0, x) : decodeURIComponent(path),\r\n                m = this.regex.exec(path);\r\n\r\n            if (!m) {\r\n                return false\r\n            };\r\n\r\n            var params = {};\r\n            for (var i = 1, len = m.length; i < len; ++i) {\r\n                var name = names[i - 1],\r\n                    val = decodeURIComponent(m[i]);\r\n                params[name] = val;\r\n            }\r\n\r\n            return params;\r\n        },\r\n\r\n        path: function(params) {\r\n            var path = this.pathto;\r\n            if (params) {\r\n                path = path.replace(/:([a-zA-Z0-9_]+)/g, function(match, paramName) {\r\n                    return params[paramName];\r\n                });\r\n            }\r\n            return path;\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            return true;\r\n        },\r\n        _entered: function(ctx) {\r\n            return true;\r\n        },\r\n        _exiting: function(ctx) {\r\n            return true;\r\n        },\r\n        _exited: function(ctx) {\r\n            return true;\r\n        },\r\n    });\r\n\r\n    function current() {\r\n        return _curCtx;\r\n    }\r\n\r\n    // refresh the current route\r\n    function dispatch(ctx) {\r\n\r\n        if (_prevCtx) {\r\n            var ret = _prevCtx.route.exit({\r\n                path: _prevCtx.path,\r\n                params: _prevCtx.params\r\n            }, true);\r\n            if (!ret) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        _prevCtx = _curCtx;\r\n        _curCtx = ctx;\r\n        if (!_curCtx.route) {\r\n            var m = map(_curCtx.path);\r\n            _curCtx.route = m.route;\r\n            _curCtx.params = m.params;\r\n        }\r\n\r\n        var r = _curCtx.route.enter({\r\n            path: _curCtx.path,\r\n            params: _curCtx.params\r\n        },true);\r\n\r\n        async.Deferred.when(r).then(function() {\r\n            eventer.trigger(_hub, \"routing\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            });\r\n\r\n            _curCtx.route.enter({\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            },false);\r\n\r\n            if (_prevCtx) {\r\n                _prevCtx.route.exit({\r\n                    path: _prevCtx.path,\r\n                    params: _prevCtx.params\r\n                }, false);\r\n            }\r\n\r\n            eventer.trigger(_hub, \"routed\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            });\r\n        });\r\n    }\r\n\r\n    function go(path, force) {\r\n        if (!force && _curCtx && _curCtx.path == path) {\r\n            return false;\r\n        }\r\n        var ctx = map(path);\r\n        if (ctx) {\r\n            ctx.path = path;\r\n\r\n            if (router.useHistoryApi) {\r\n                var state = {\r\n                    path: path\r\n                }\r\n\r\n                window.history.pushState(state, document.title, (_baseUrl + path).replace(\"//\", \"/\"));\r\n                eventer.trigger(window, eventer.create(\"popstate\", {\r\n                    state: state\r\n                }));\r\n            } else if (router.useHashbang) {\r\n                var newHash = \"#!\" + path;\r\n                if (window.location.hash !== newHash) {\r\n                    window.location.hash = newHash;\r\n                } else {\r\n                    dispatch(ctx);\r\n                };\r\n            } else {\r\n                dispatch(ctx);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function map(path, noCache) {\r\n        var finded = false;\r\n        if (!noCache) {\r\n            finded = _cache[path];\r\n            if (finded) {\r\n                return finded;\r\n            }\r\n        }\r\n        langx.each(_routes, function(name, route) {\r\n            var ret = route.match(path);\r\n            if (ret) {\r\n                finded = {\r\n                    route: route,\r\n                    params: ret\r\n                }\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        if (finded && !noCache) {\r\n            _cache[path] = finded;\r\n        }\r\n        return finded;\r\n    }\r\n\r\n    function path(routeName, params) {\r\n        var route = _routes[routeName],\r\n            path;\r\n        if (route) {\r\n            path = route.path(params);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function previous() {\r\n        return _prevCtx;\r\n    }\r\n\r\n    function baseUrl(path) {\r\n        if (langx.isDefined(path)) {\r\n            _baseUrl = path;\r\n            return this;\r\n        } else {\r\n            return _baseUrl;\r\n        }\r\n    }\r\n\r\n    function hub(){\r\n        return _hub;\r\n    }\r\n\r\n    function homePath(path) {\r\n        if (langx.isDefined(path)) {\r\n            _homePath = path;\r\n            return this;\r\n        } else {\r\n            return _homePath;\r\n        }\r\n    }\r\n\r\n    function route(name, setting) {\r\n        if (langx.isDefined(setting)) {\r\n            var settings = {};\r\n            settings[name] = setting;\r\n            routes(settings);\r\n            return this;\r\n        } else {\r\n            return _routes[name];\r\n        }\r\n    }\r\n\r\n    function routes(settings) {\r\n        if (!langx.isDefined(settings)) {\r\n            return langx.mixin({}, _routes);\r\n        } else {\r\n            for (var name in settings) {\r\n                _routes[name] = new router.Route(name, settings[name]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //starts routing urls\r\n    function start() {\r\n        if (router.useHashbang == null && router.useHistoryApi == null) {\r\n            if (window.location.host) {\r\n                //web access\r\n                router.useHistoryApi = true;\r\n            } else {\r\n                // local access\r\n                router.useHashbang = true;\r\n            }\r\n        }\r\n\r\n        var initPath;\r\n\r\n        if (router.useHistoryApi) {\r\n            initPath = window.location.pathname;\r\n            if (_baseUrl === undefined) {\r\n                _baseUrl = initPath.replace(/\\/$/, \"\");\r\n            }\r\n            initPath = initPath.replace(_baseUrl, \"\") || _homePath || \"/\";\r\n        } else if (router.useHashbang) {\r\n            initPath = window.location.hash.replace(\"#!\", \"\") || _homePath || \"/\";\r\n        } else {\r\n            initPath = \"/\";\r\n        }\r\n\r\n        eventer.on(document.body, \"click\", \"a[href]\", function(e) {\r\n            var elm = e.currentTarget,\r\n                url = datax.attr(elm, \"href\");\r\n\r\n            if (url == \"#\") {\r\n                return;\r\n            }\r\n            if (url && langx.isSameOrigin(elm.href)) {\r\n                if (url.indexOf(_baseUrl) === 0) {\r\n                    url = url.substr(_baseUrl.length);\r\n                    eventer.stop(e);\r\n                    url = url.replace('#!', '');\r\n                    go(url);\r\n                }\r\n            }\r\n\r\n        });\r\n        if (router.useHistoryApi) {\r\n            eventer.on(window, \"popstate\", function(e) {\r\n                if(e.state) dispatch(e.state);\r\n                eventer.stop(e);\r\n            });\r\n        } else if (router.useHashbang) {\r\n            eventer.on(window, \"hashchange\", function(e) {\r\n                dispatch({\r\n                    path: window.location.hash.replace(/^#!/, \"\")\r\n                });\r\n                eventer.stop(e);\r\n            });\r\n        }\r\n\r\n        go(initPath);\r\n    }\r\n\r\n    var router = function() {\r\n        return router;\r\n    };\r\n\r\n    langx.mixin(router, {\r\n        \"Route\": Route,\r\n\r\n        // Current path being processed\r\n        \"current\": current,\r\n\r\n        // Changes the current path\r\n        \"go\": go,\r\n\r\n        \"map\": map,\r\n\r\n        \"hub\": hub,\r\n\r\n        \"off\": function() {\r\n            _hub.off.apply(_hub, arguments);\r\n        },\r\n\r\n        \"on\": function() {\r\n            _hub.on.apply(_hub, arguments);\r\n        },\r\n\r\n        \"one\": function() {\r\n            _hub.one.apply(_hub, arguments);\r\n        },\r\n\r\n        // Returns the path of the named route\r\n        \"path\": path,\r\n\r\n        \"previous\": previous,\r\n\r\n        \"baseUrl\": baseUrl,\r\n\r\n        \"homePath\": homePath,\r\n\r\n        \"route\": route,\r\n\r\n        \"routes\": routes,\r\n\r\n        //starts routing urls\r\n        \"start\": start,\r\n\r\n        \"trigger\": function(type, props) {\r\n            eventer.trigger(_hub, type, props);\r\n            return this;\r\n        },\r\n\r\n        \"useHistoryApi\": null,\r\n        \"useHashbang\": null\r\n    });\r\n\r\n    return skylark.router = router;\r\n});\r\n\ndefine('skylark-router', ['skylark-router/router'], function (main) { return main; });\n\n"]}