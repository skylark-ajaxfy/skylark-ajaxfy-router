{"version":3,"sources":["skylark-ajaxfy-router.js"],"names":["define","skylark","attach","langx","routing","Route","Evented","inherit","klassName","init","name","setting","pathto","mixin","pattern","paramNames","match","map","paramName","substring","replace","this","_setting","params","regex","RegExp","self","forEach","eventName","isFunction","on","enter","ctx","query","r","_entering","Deferred","when","then","e","createEvent","route","result","trigger","_entered","safeMixin","exit","ok","_exiting","_exited","path","names","x","indexOf","slice","decodeURIComponent","m","exec","i","len","length","val","_curCtx","_prevCtx","_baseUrl","_homePath","_routes","_cache","_hub","type","props","CustomEvent","dispatch","ret","force","current","previous","go","router","useHistoryApi","state","window","history","pushState","document","title","dispatchEvent","useHashbang","newHash","location","hash","noCache","finded","each","routes","settings","isDefined","hub","off","apply","arguments","one","routeName","baseUrl","homePath","start","host","initPath","pathname","undefined","startsWith","addEventListener","preventDefault","main"],"mappings":"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","file":"../skylark-ajaxfy-router.js","sourcesContent":["define('skylark-ajaxfy-router/routing',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\r\n\treturn skylark.attach(\"fw.routing\",{});\t\r\n});\r\n\ndefine('skylark-ajaxfy-router/Route',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./routing\"\r\n],function(langx,routing){\r\n    var Route = langx.Evented.inherit({\r\n        klassName: \"Route\",\r\n        init: function(name, setting) {\r\n            setting = langx.mixin({}, setting);\r\n            var pathto = setting.pathto || \"\",\r\n                pattern = pathto,\r\n                paramNames = pattern.match(/\\:([a-zA-Z0-9_]+)/g);\r\n            if (paramNames !== null) {\r\n                paramNames = paramNames.map(function(paramName) {\r\n                    return paramName.substring(1);\r\n                });\r\n                pattern = pattern.replace(/\\:([a-zA-Z0-9_]+)/g, '(.*?)');\r\n            } else {\r\n                paramNames = [];\r\n            }\r\n            if (pattern === \"*\") {\r\n                pattern = \"(.*)\";\r\n            } else {\r\n                pattern = pattern.replace(\"/\", \"\\\\/\");\r\n            }\r\n\r\n            this._setting = setting;\r\n            this.name = name;\r\n            this.pathto = pathto;\r\n            this.paramNames = paramNames;\r\n            this.params = pattern;\r\n            this.regex = new RegExp(\"^\" + pattern + \"$\", \"\");\r\n\r\n            var self = this;\r\n            [\"entering\", \"entered\", \"exiting\", \"exited\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        enter: function(ctx,query) {\r\n            if (query) {\r\n                var r = this._entering(ctx),\r\n                    self = this;\r\n\r\n                return langx.Deferred.when(r).then(function(){\r\n                    var e = createEvent(\"entering\", {\r\n                        route: self,\r\n                        result: true\r\n                    });\r\n\r\n                    self.trigger(e);\r\n\r\n                    return e.result;\r\n                });\r\n            } else {\r\n                this._entered(ctx);\r\n\r\n                this.trigger(createEvent(\"entered\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n                return this;\r\n            }\r\n        },\r\n\r\n        exit: function(ctx, query) {\r\n            if (query) {\r\n                var ok = this._exiting(ctx);\r\n                if (!ok) {\r\n                    return false;\r\n                }\r\n\r\n                var e = createEvent(\"exiting\", {\r\n                    route: this,\r\n                    result: true\r\n                });\r\n\r\n                this.trigger(e);\r\n\r\n                return e.result;\r\n            } else {\r\n                this._exited(ctx);\r\n                this.trigger(createEvent(\"exited\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n\r\n                return this;\r\n            }\r\n        },\r\n\r\n        match: function(path) {\r\n            var names = this.paramNames,\r\n                x = path.indexOf('?'),\r\n                path = ~x ? path.slice(0, x) : decodeURIComponent(path),\r\n                m = this.regex.exec(path);\r\n\r\n            if (!m) {\r\n                return false\r\n            };\r\n\r\n            var params = {};\r\n            for (var i = 1, len = m.length; i < len; ++i) {\r\n                var name = names[i - 1],\r\n                    val = decodeURIComponent(m[i]);\r\n                params[name] = val;\r\n            }\r\n\r\n            return params;\r\n        },\r\n\r\n        path: function(params) {\r\n            var path = this.pathto;\r\n            if (params) {\r\n                path = path.replace(/:([a-zA-Z0-9_]+)/g, function(match, paramName) {\r\n                    return params[paramName];\r\n                });\r\n            }\r\n            return path;\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            return true;\r\n        },\r\n        _entered: function(ctx) {\r\n            return true;\r\n        },\r\n        _exiting: function(ctx) {\r\n            return true;\r\n        },\r\n        _exited: function(ctx) {\r\n            return true;\r\n        },\r\n    });\r\n\r\n\treturn routing.Route = Route;\t\r\n});\ndefine('skylark-ajaxfy-router/router',[\r\n    \"skylark-langx/langx\",\r\n    \"./routing\",\r\n    \"./Route\"\r\n],function(langx,routing,Route){\r\n    var _curCtx,\r\n        _prevCtx,\r\n        _baseUrl,\r\n        _homePath,\r\n        _routes = {},\r\n        _cache = {},\r\n        _hub = new langx.Evented();\r\n\r\n    function createEvent(type,props) {\r\n        var e = new CustomEvent(type,props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n\r\n    function current() {\r\n        return _curCtx;\r\n    }\r\n\r\n    // refresh the current route\r\n    function dispatch(ctx) {\r\n\r\n        if (_curCtx) {\r\n            var ret = _curCtx.route.exit({\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            }, true);\r\n            if (!ret) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        _prevCtx = _curCtx;\r\n        _curCtx = ctx;\r\n        if (!_curCtx.route) {\r\n            var m = map(_curCtx.path);\r\n            _curCtx.route = m.route;\r\n            _curCtx.params = m.params;\r\n        }\r\n\r\n        var r = _curCtx.route.enter({\r\n            force: _curCtx.force,\r\n            path: _curCtx.path,\r\n            params: _curCtx.params\r\n        },true);\r\n\r\n        langx.Deferred.when(r).then(function() {\r\n            _hub.trigger(createEvent(\"routing\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            }));\r\n\r\n            _curCtx.route.enter({\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            },false);\r\n\r\n            if (_prevCtx) {\r\n                _prevCtx.route.exit({\r\n                    path: _prevCtx.path,\r\n                    params: _prevCtx.params\r\n                }, false);\r\n            }\r\n\r\n            _hub.trigger(createEvent(\"routed\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            }));\r\n        });\r\n    }\r\n\r\n    function go(path, force) {\r\n        if (!force && _curCtx && _curCtx.path == path) {\r\n            return false;\r\n        }\r\n        var ctx = map(path);\r\n        if (ctx) {\r\n            ctx.path = path;\r\n\r\n            if (router.useHistoryApi) {\r\n                var state = {\r\n                    force: force,\r\n                    path: path\r\n                }\r\n\r\n                window.history.pushState(state, document.title, (_baseUrl + path).replace(\"//\", \"/\"));\r\n                window.dispatchEvent(createEvent(\"popstate\", {\r\n                    state: state\r\n                }));\r\n            } else if (router.useHashbang) {\r\n                var newHash = \"#!\" + path;\r\n                if (window.location.hash !== newHash) {\r\n                    window.location.hash = newHash;\r\n                } else {\r\n                    dispatch(ctx);\r\n                };\r\n            } else {\r\n                dispatch(ctx);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function map(path, noCache) {\r\n        var finded = false;\r\n        if (!noCache) {\r\n            finded = _cache[path];\r\n            if (finded) {\r\n                return finded;\r\n            }\r\n        }\r\n        langx.each(_routes, function(name, route) {\r\n            var ret = route.match(path);\r\n            if (ret) {\r\n                finded = {\r\n                    route: route,\r\n                    params: ret\r\n                }\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        if (finded && !noCache) {\r\n            _cache[path] = finded;\r\n        }\r\n        return finded;\r\n    }\r\n\r\n    function path(routeName, params) {\r\n        var route = _routes[routeName],\r\n            path;\r\n        if (route) {\r\n            path = route.path(params);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function previous() {\r\n        return _prevCtx;\r\n    }\r\n\r\n    function baseUrl(path) {\r\n        if (langx.isDefined(path)) {\r\n            _baseUrl = path;\r\n            return this;\r\n        } else {\r\n            return _baseUrl;\r\n        }\r\n    }\r\n\r\n    function hub(){\r\n        return _hub;\r\n    }\r\n\r\n    function homePath(path) {\r\n        if (langx.isDefined(path)) {\r\n            _homePath = path;\r\n            return this;\r\n        } else {\r\n            return _homePath;\r\n        }\r\n    }\r\n\r\n    function route(name, setting) {\r\n        if (langx.isDefined(setting)) {\r\n            var settings = {};\r\n            settings[name] = setting;\r\n            routes(settings);\r\n            return this;\r\n        } else {\r\n            return _routes[name];\r\n        }\r\n    }\r\n\r\n    function routes(settings) {\r\n        if (!langx.isDefined(settings)) {\r\n            return langx.mixin({}, _routes);\r\n        } else {\r\n            for (var name in settings) {\r\n                _routes[name] = new router.Route(name, settings[name]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //starts routing urls\r\n    function start() {\r\n        if (router.useHashbang == null && router.useHistoryApi == null) {\r\n            if (window.location.host  && window.history.pushState) {\r\n                //web access\r\n                router.useHistoryApi = true;\r\n            } else {\r\n                // local access\r\n                router.useHashbang = true;\r\n            }\r\n        }\r\n\r\n        var initPath = \"\";\r\n\r\n        if (router.useHistoryApi) {\r\n            initPath = window.location.pathname;\r\n            if (_baseUrl === undefined) {\r\n                _baseUrl = initPath.replace(/\\/$/, \"\");\r\n            }\r\n            initPath = initPath.replace(_baseUrl, \"\") || _homePath || \"/\";\r\n        } else if (router.useHashbang) {\r\n            initPath = window.location.hash.replace(\"#!\", \"\") || _homePath || \"/\";\r\n        } else {\r\n            initPath = \"/\";\r\n        }\r\n\r\n        if (!initPath.startsWith(\"/\")) {\r\n            initPath = \"/\" + initPath;\r\n        }\r\n        /*\r\n        eventer.on(document.body, \"click\", \"a[href]\", function(e) {\r\n            var elm = e.currentTarget,\r\n                url = elm.getAttribute(\"href\");\r\n\r\n            if (url == \"#\") {\r\n                return;\r\n            }\r\n            if (url && langx.isSameOrigin(elm.href)) {\r\n                if (url.indexOf(_baseUrl) === 0) {\r\n                    url = url.substr(_baseUrl.length);\r\n                    eventer.stop(e);\r\n                    url = url.replace('#!', '');\r\n                    go(url);\r\n                }\r\n            }\r\n        });\r\n        */\r\n        if (router.useHistoryApi) {\r\n            window.addEventListener(\"popstate\", function(e) {\r\n                if(e.state) dispatch(e.state);\r\n                e.preventDefault();\r\n            });\r\n        } else if (router.useHashbang) {\r\n            window.addEventListener(\"hashchange\", function(e) {\r\n                dispatch({\r\n                    path: window.location.hash.replace(/^#!/, \"\")\r\n                });\r\n                e.preventDefault();\r\n            });\r\n        }\r\n\r\n        go(initPath);\r\n    }\r\n\r\n    var router = function() {\r\n        return router;\r\n    };\r\n\r\n    langx.mixin(router, {\r\n        \"Route\": Route,\r\n\r\n        // Current path being processed\r\n        \"current\": current,\r\n\r\n        // Changes the current path\r\n        \"go\": go,\r\n\r\n        \"map\": map,\r\n\r\n        \"hub\": hub,\r\n\r\n        \"off\": function() {\r\n            _hub.off.apply(_hub, arguments);\r\n        },\r\n\r\n        \"on\": function() {\r\n            _hub.on.apply(_hub, arguments);\r\n        },\r\n\r\n        \"one\": function() {\r\n            _hub.one.apply(_hub, arguments);\r\n        },\r\n\r\n        // Returns the path of the named route\r\n        \"path\": path,\r\n\r\n        \"previous\": previous,\r\n\r\n        \"baseUrl\": baseUrl,\r\n\r\n        \"homePath\": homePath,\r\n\r\n        \"route\": route,\r\n\r\n        \"routes\": routes,\r\n\r\n        //starts routing urls\r\n        \"start\": start,\r\n\r\n        \"trigger\": function(e) {\r\n            _hub.trigger(e);\r\n            return this;\r\n        },\r\n\r\n        \"useHistoryApi\": null,\r\n        \"useHashbang\": null\r\n    });\r\n\r\n    return skylark.router = router;\r\n});\r\n\ndefine('skylark-ajaxfy-router/main',[\r\n    \"skylark-langx/skylark\",\r\n    \"./router\"\r\n], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-ajaxfy-router', ['skylark-ajaxfy-router/main'], function (main) { return main; });\n\n"]}