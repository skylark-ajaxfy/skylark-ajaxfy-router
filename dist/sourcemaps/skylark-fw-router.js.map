{"version":3,"sources":["skylark-fw-router.js"],"names":["define","skylark","langx","_curCtx","_prevCtx","_baseUrl","_homePath","_routes","_cache","_hub","Evented","createEvent","type","props","e","CustomEvent","safeMixin","Route","inherit","klassName","init","name","setting","pathto","mixin","pattern","paramNames","match","map","paramName","substring","replace","this","_setting","params","regex","RegExp","self","forEach","eventName","isFunction","on","enter","ctx","query","r","_entering","Deferred","when","then","route","result","trigger","_entered","exit","ok","_exiting","_exited","path","names","x","indexOf","slice","decodeURIComponent","m","exec","i","len","length","val","dispatch","ret","force","current","previous","go","router","useHistoryApi","state","window","history","pushState","document","title","dispatchEvent","useHashbang","newHash","location","hash","noCache","finded","each","routes","settings","isDefined","hub","off","apply","arguments","one","routeName","baseUrl","homePath","start","host","initPath","pathname","undefined","startsWith","addEventListener","preventDefault","main"],"mappings":"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","file":"../skylark-fw-router.js","sourcesContent":["define('skylark-fw-router/router',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\r\n    var _curCtx,\r\n        _prevCtx,\r\n        _baseUrl,\r\n        _homePath,\r\n        _routes = {},\r\n        _cache = {},\r\n        _hub = new langx.Evented();\r\n\r\n    function createEvent(type,props) {\r\n        var e = new CustomEvent(type,props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var Route = langx.Evented.inherit({\r\n        klassName: \"Route\",\r\n        init: function(name, setting) {\r\n            setting = langx.mixin({}, setting);\r\n            var pathto = setting.pathto || \"\",\r\n                pattern = pathto,\r\n                paramNames = pattern.match(/\\:([a-zA-Z0-9_]+)/g);\r\n            if (paramNames !== null) {\r\n                paramNames = paramNames.map(function(paramName) {\r\n                    return paramName.substring(1);\r\n                });\r\n                pattern = pattern.replace(/\\:([a-zA-Z0-9_]+)/g, '(.*?)');\r\n            } else {\r\n                paramNames = [];\r\n            }\r\n            if (pattern === \"*\") {\r\n                pattern = \"(.*)\";\r\n            } else {\r\n                pattern = pattern.replace(\"/\", \"\\\\/\");\r\n            }\r\n\r\n            this._setting = setting;\r\n            this.name = name;\r\n            this.pathto = pathto;\r\n            this.paramNames = paramNames;\r\n            this.params = pattern;\r\n            this.regex = new RegExp(\"^\" + pattern + \"$\", \"\");\r\n\r\n            var self = this;\r\n            [\"entering\", \"entered\", \"exiting\", \"exited\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        enter: function(ctx,query) {\r\n            if (query) {\r\n                var r = this._entering(ctx),\r\n                    self = this;\r\n\r\n                return langx.Deferred.when(r).then(function(){\r\n                    var e = createEvent(\"entering\", {\r\n                        route: self,\r\n                        result: true\r\n                    });\r\n\r\n                    self.trigger(e);\r\n\r\n                    return e.result;\r\n                });\r\n            } else {\r\n                this._entered(ctx);\r\n\r\n                this.trigger(createEvent(\"entered\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n                return this;\r\n            }\r\n        },\r\n\r\n        exit: function(ctx, query) {\r\n            if (query) {\r\n                var ok = this._exiting(ctx);\r\n                if (!ok) {\r\n                    return false;\r\n                }\r\n\r\n                var e = createEvent(\"exiting\", {\r\n                    route: this,\r\n                    result: true\r\n                });\r\n\r\n                this.trigger(e);\r\n\r\n                return e.result;\r\n            } else {\r\n                this._exited(ctx);\r\n                this.trigger(createEvent(\"exited\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n\r\n                return this;\r\n            }\r\n        },\r\n\r\n        match: function(path) {\r\n            var names = this.paramNames,\r\n                x = path.indexOf('?'),\r\n                path = ~x ? path.slice(0, x) : decodeURIComponent(path),\r\n                m = this.regex.exec(path);\r\n\r\n            if (!m) {\r\n                return false\r\n            };\r\n\r\n            var params = {};\r\n            for (var i = 1, len = m.length; i < len; ++i) {\r\n                var name = names[i - 1],\r\n                    val = decodeURIComponent(m[i]);\r\n                params[name] = val;\r\n            }\r\n\r\n            return params;\r\n        },\r\n\r\n        path: function(params) {\r\n            var path = this.pathto;\r\n            if (params) {\r\n                path = path.replace(/:([a-zA-Z0-9_]+)/g, function(match, paramName) {\r\n                    return params[paramName];\r\n                });\r\n            }\r\n            return path;\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            return true;\r\n        },\r\n        _entered: function(ctx) {\r\n            return true;\r\n        },\r\n        _exiting: function(ctx) {\r\n            return true;\r\n        },\r\n        _exited: function(ctx) {\r\n            return true;\r\n        },\r\n    });\r\n\r\n    function current() {\r\n        return _curCtx;\r\n    }\r\n\r\n    // refresh the current route\r\n    function dispatch(ctx) {\r\n\r\n        if (_curCtx) {\r\n            var ret = _curCtx.route.exit({\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            }, true);\r\n            if (!ret) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        _prevCtx = _curCtx;\r\n        _curCtx = ctx;\r\n        if (!_curCtx.route) {\r\n            var m = map(_curCtx.path);\r\n            _curCtx.route = m.route;\r\n            _curCtx.params = m.params;\r\n        }\r\n\r\n        var r = _curCtx.route.enter({\r\n            force: _curCtx.force,\r\n            path: _curCtx.path,\r\n            params: _curCtx.params\r\n        },true);\r\n\r\n        langx.Deferred.when(r).then(function() {\r\n            _hub.trigger(createEvent(\"routing\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            }));\r\n\r\n            _curCtx.route.enter({\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            },false);\r\n\r\n            if (_prevCtx) {\r\n                _prevCtx.route.exit({\r\n                    path: _prevCtx.path,\r\n                    params: _prevCtx.params\r\n                }, false);\r\n            }\r\n\r\n            _hub.trigger(createEvent(\"routed\", {\r\n                current: _curCtx,\r\n                previous: _prevCtx\r\n            }));\r\n        });\r\n    }\r\n\r\n    function go(path, force) {\r\n        if (!force && _curCtx && _curCtx.path == path) {\r\n            return false;\r\n        }\r\n        var ctx = map(path);\r\n        if (ctx) {\r\n            ctx.path = path;\r\n\r\n            if (router.useHistoryApi) {\r\n                var state = {\r\n                    force: force,\r\n                    path: path\r\n                }\r\n\r\n                window.history.pushState(state, document.title, (_baseUrl + path).replace(\"//\", \"/\"));\r\n                window.dispatchEvent(createEvent(\"popstate\", {\r\n                    state: state\r\n                }));\r\n            } else if (router.useHashbang) {\r\n                var newHash = \"#!\" + path;\r\n                if (window.location.hash !== newHash) {\r\n                    window.location.hash = newHash;\r\n                } else {\r\n                    dispatch(ctx);\r\n                };\r\n            } else {\r\n                dispatch(ctx);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function map(path, noCache) {\r\n        var finded = false;\r\n        if (!noCache) {\r\n            finded = _cache[path];\r\n            if (finded) {\r\n                return finded;\r\n            }\r\n        }\r\n        langx.each(_routes, function(name, route) {\r\n            var ret = route.match(path);\r\n            if (ret) {\r\n                finded = {\r\n                    route: route,\r\n                    params: ret\r\n                }\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        if (finded && !noCache) {\r\n            _cache[path] = finded;\r\n        }\r\n        return finded;\r\n    }\r\n\r\n    function path(routeName, params) {\r\n        var route = _routes[routeName],\r\n            path;\r\n        if (route) {\r\n            path = route.path(params);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function previous() {\r\n        return _prevCtx;\r\n    }\r\n\r\n    function baseUrl(path) {\r\n        if (langx.isDefined(path)) {\r\n            _baseUrl = path;\r\n            return this;\r\n        } else {\r\n            return _baseUrl;\r\n        }\r\n    }\r\n\r\n    function hub(){\r\n        return _hub;\r\n    }\r\n\r\n    function homePath(path) {\r\n        if (langx.isDefined(path)) {\r\n            _homePath = path;\r\n            return this;\r\n        } else {\r\n            return _homePath;\r\n        }\r\n    }\r\n\r\n    function route(name, setting) {\r\n        if (langx.isDefined(setting)) {\r\n            var settings = {};\r\n            settings[name] = setting;\r\n            routes(settings);\r\n            return this;\r\n        } else {\r\n            return _routes[name];\r\n        }\r\n    }\r\n\r\n    function routes(settings) {\r\n        if (!langx.isDefined(settings)) {\r\n            return langx.mixin({}, _routes);\r\n        } else {\r\n            for (var name in settings) {\r\n                _routes[name] = new router.Route(name, settings[name]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //starts routing urls\r\n    function start() {\r\n        if (router.useHashbang == null && router.useHistoryApi == null) {\r\n            if (window.location.host  && window.history.pushState) {\r\n                //web access\r\n                router.useHistoryApi = true;\r\n            } else {\r\n                // local access\r\n                router.useHashbang = true;\r\n            }\r\n        }\r\n\r\n        var initPath = \"\";\r\n\r\n        if (router.useHistoryApi) {\r\n            initPath = window.location.pathname;\r\n            if (_baseUrl === undefined) {\r\n                _baseUrl = initPath.replace(/\\/$/, \"\");\r\n            }\r\n            initPath = initPath.replace(_baseUrl, \"\") || _homePath || \"/\";\r\n        } else if (router.useHashbang) {\r\n            initPath = window.location.hash.replace(\"#!\", \"\") || _homePath || \"/\";\r\n        } else {\r\n            initPath = \"/\";\r\n        }\r\n\r\n        if (!initPath.startsWith(\"/\")) {\r\n            initPath = \"/\" + initPath;\r\n        }\r\n        /*\r\n        eventer.on(document.body, \"click\", \"a[href]\", function(e) {\r\n            var elm = e.currentTarget,\r\n                url = elm.getAttribute(\"href\");\r\n\r\n            if (url == \"#\") {\r\n                return;\r\n            }\r\n            if (url && langx.isSameOrigin(elm.href)) {\r\n                if (url.indexOf(_baseUrl) === 0) {\r\n                    url = url.substr(_baseUrl.length);\r\n                    eventer.stop(e);\r\n                    url = url.replace('#!', '');\r\n                    go(url);\r\n                }\r\n            }\r\n        });\r\n        */\r\n        if (router.useHistoryApi) {\r\n            window.addEventListener(\"popstate\", function(e) {\r\n                if(e.state) dispatch(e.state);\r\n                e.preventDefault();\r\n            });\r\n        } else if (router.useHashbang) {\r\n            window.addEventListener(\"hashchange\", function(e) {\r\n                dispatch({\r\n                    path: window.location.hash.replace(/^#!/, \"\")\r\n                });\r\n                e.preventDefault();\r\n            });\r\n        }\r\n\r\n        go(initPath);\r\n    }\r\n\r\n    var router = function() {\r\n        return router;\r\n    };\r\n\r\n    langx.mixin(router, {\r\n        \"Route\": Route,\r\n\r\n        // Current path being processed\r\n        \"current\": current,\r\n\r\n        // Changes the current path\r\n        \"go\": go,\r\n\r\n        \"map\": map,\r\n\r\n        \"hub\": hub,\r\n\r\n        \"off\": function() {\r\n            _hub.off.apply(_hub, arguments);\r\n        },\r\n\r\n        \"on\": function() {\r\n            _hub.on.apply(_hub, arguments);\r\n        },\r\n\r\n        \"one\": function() {\r\n            _hub.one.apply(_hub, arguments);\r\n        },\r\n\r\n        // Returns the path of the named route\r\n        \"path\": path,\r\n\r\n        \"previous\": previous,\r\n\r\n        \"baseUrl\": baseUrl,\r\n\r\n        \"homePath\": homePath,\r\n\r\n        \"route\": route,\r\n\r\n        \"routes\": routes,\r\n\r\n        //starts routing urls\r\n        \"start\": start,\r\n\r\n        \"trigger\": function(e) {\r\n            _hub.trigger(e);\r\n            return this;\r\n        },\r\n\r\n        \"useHistoryApi\": null,\r\n        \"useHashbang\": null\r\n    });\r\n\r\n    return skylark.router = router;\r\n});\r\n\ndefine('skylark-fw-router/main',[\r\n    \"skylark-langx/skylark\",\r\n    \"./router\"\r\n], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-fw-router', ['skylark-fw-router/main'], function (main) { return main; });\n\n"]}